# vim: set ft=yaml ts=2 sw=2:
name: Setup and Install Poetry
description: Install and set up the Poetry build tool
branding:
  icon: "code"
  color: "blue"
inputs:
  version:
    description: "Version of Poetry to install (>= 1.8.0)"
    required: true
  plugins:
    description: "Comma-separated list of Poetry plugins to install, deprecated for Poetry v2 or later"
    required: false
    default: ""
  cache-venv:
    description: "Whether to cache the project .venv virtual environment"
    required: false
    default: "false"
  cache-poetry:
    description: "Whether to cache the Poetry runtime and cache directories"
    required: false
    default: "false"
  cache-suffix:
    description: "Suffix to use for cache key, which can be used to reset the cache"
    required: false
    default: "000"
  max-workers:
    description: "Maximum number of Poetry workers, if default of cores*4 is too large"
    required: false
    default: ""
  disable-keyring:
    description: "Whether to globally disable the Python keyring via Poetry configuration"
    required: false
    default: "true"  # defaults to true to be compatible with @v1 of this action
runs:
  using: composite
  steps:
    - name: Set SHA1 command to shasum on MacOS
      if: "${{ runner.os == 'macOS' }}"
      shell: bash
      run: |
        echo "SHA1=shasum" >> "$GITHUB_ENV"
    - name: Set SHA1 command to sha1sum on other platforms
      if: "${{ runner.os != 'macOS' }}"
      shell: bash
      run: |
        echo "SHA1=sha1sum" >> "$GITHUB_ENV"
    - name: Establish Python version
      shell: bash
      run: |
        # Establish Python version
        which python
        python --version
        python -c "import sys;print('Python %s' % sys.version)"
        echo "PYTHON_VERSION=$(python --version | sed 's/^Python //')" >> "$GITHUB_ENV"
    - name: Configure Poetry environment variables
      shell: bash
      run: |
        # Configure Poetry environment variables
        echo "POETRY_VERSION=${{ inputs.version }}" >> "$GITHUB_ENV"
        echo "POETRY_CONFIG_DIR=$GITHUB_WORKSPACE/.poetry/config" >> "$GITHUB_ENV"
        echo "POETRY_HOME=$GITHUB_WORKSPACE/.poetry/runtime" >> "$GITHUB_ENV"
        echo "POETRY_CACHE=$GITHUB_WORKSPACE/.poetry/cache" >> "$GITHUB_ENV"
        echo "POETRY_PLUGIN_HASH=$(echo '${{ inputs.plugins }}' | ${{ env.SHA1 }} | sed 's/ .*$//')" >> "$GITHUB_ENV"
    - name: Configure Git to ignore Poetry-related directories
      shell: bash
      run: |
        # Configure Git to ignore Poetry-related directories
        mkdir -p "$POETRY_CONFIG_DIR"
        echo "*" > "$POETRY_CONFIG_DIR/.gitignore"
        mkdir -p "$POETRY_HOME"
        echo "*" > "$POETRY_HOME/.gitignore"
        mkdir -p "$POETRY_CACHE"
        echo "*" > "$POETRY_CACHE/.gitignore"
    - name: Add Poetry to the system $PATH
      shell: bash
      run: |
        # Add Poetry to the system $PATH
        echo "$GITHUB_WORKSPACE/.poetry/runtime/bin" >> "$GITHUB_PATH"
    - name: Cache $POETRY_HOME
      if: "${{ inputs.cache-poetry == 'true' }}"
      uses: actions/cache@v4
      with:
        # It's important to base this key on the full Python installed version
        # (i.e. 3.9.2) and not just a matrix version (i.e. 3.9).  We also want
        # to include the plugins in the hash, so everything is rebuilt from scratch
        # if the requested plugins change.
        path: ".poetry/runtime"
        key: "poetry-home|v2|${{ runner.os }}|${{ env.PYTHON_VERSION }}|${{ env.POETRY_VERSION }}|${{ env.POETRY_PLUGIN_HASH }}|${{ inputs.cache-suffix }}"
    - name: Cache $POETRY_CACHE
      if: "${{ inputs.cache-poetry == 'true' }}"
      uses: actions/cache@v4
      with:
        # It's important to base this key on the full Python installed version
        # (i.e. 3.9.2) and not just a matrix version (i.e. 3.9).  We also want
        # to include the plugins in the hash, so everything is rebuilt from scratch
        # if the requested plugins change.
        path: ".poetry/cache"
        key: "poetry-cache|v2|${{ runner.os }}|${{ env.PYTHON_VERSION }}|${{ env.POETRY_VERSION }}|${{ env.POETRY_PLUGIN_HASH }}|${{ hashFiles('**/poetry.lock') }}|${{ inputs.cache-suffix }}"
    - name: Install Poetry
      shell: bash
      run: |
        # Install Poetry >=1.8.0 using pipx
        "$GITHUB_ACTION_PATH/scripts/install-poetry.sh"
    - name: Display Poetry location and version
      shell: bash
      run: |
        # Display Poetry location and version
        which poetry
        poetry --version
    - name: Configure Poetry
      shell: bash
      env:
        MAX_WORKERS: "${{ inputs.max-workers }}"
        DISABLE_KEYRING: "${{ inputs.disable-keyring }}"
      run: |
        # Configure Poetry
        "$GITHUB_ACTION_PATH/scripts/configure-poetry.sh"
    - name: Install Poetry plugins
      shell: bash
      env:
        POETRY_PLUGINS: "${{ inputs.plugins }}"
      run: |
        # Install requested Poetry plugins, if any
        "$GITHUB_ACTION_PATH/scripts/install-plugins.sh"
    - name: Cache Virtual Environment
      if: "${{ inputs.cache-venv == 'true' }}"
      uses: actions/cache@v4
      with:
        # It's important to base this key on the full Python installed version
        # (i.e. 3.9.2) and not just a matrix version (i.e. 3.9).
        path: ".venv"
        key: "poetry-venv|v2|${{ runner.os }}|${{ env.PYTHON_VERSION }}|${{ hashFiles('**/poetry.lock') }}|${{ inputs.cache-suffix }}"
